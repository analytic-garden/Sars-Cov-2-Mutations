Pipeline

1) Download SARS-CoV-2 FASTA and GenBank sequences from
https://www.ncbi.nlm.nih.gov/datasets/coronavirus/genomes/
unzip in data directories seqs.fasta dn segs.gb
data is in seqs.fasta/ncbi_dataset/data/genomic.fna and
seqs.gb/ncbi_dataset/data/genomic.gbff

2) Remove duplicate sequences and sequeces with bad dates
remove_dups_dates.py
New FASTA file sequences_no_dups.fasta

3) Align sequences
time java -jar /home/bill/HAlign/HAlign-2.1.jar -localMSA sequences_no_dups.fasta sequences_no_dups_aln.fasta 0
produces sequences_no_dups_aln.fasta

6) run consensus3.py
edit consensus cutoff and min_qual_cutoff
produces:
sars_cov_2_variation_ncbi_no_dups_98.0.csv - positions with signifcant varion by NCBI ID
MI_ncbi_no_dups.csv - mutual information among aligned positions
sars_cov_2_ncbi_ncbi_mut_no_dups_98.0.csv -  positions with significant mutations

R

7) Plot MI graph
mi_2020_10_07 <- read.csv('MI_ncbi_no_dups.csv')
plot_MI(mi_2020_10_07)

8) Read sars_cov_2_variation_ncbi_no_dups_98.0.csv into dataframe
cv_2020_09_04 <- read_csv('sars_cov_2_variation_ncbi_no_dups_98.0.csv')
# remove spaves from column names
names(cv_2020_10_07) <- make.names(names(cv_2020_10_07), unique = TRUE)
cv_2020_10_07$Collection.Date <- as.Date(cv_2020_10_07$Collection.Date)

9) Plot varying positions - displays all positions with significant MI
and saves to files
plot_varying_nucs(cv_2020_10_07)
plot_varying_pct2(cv_2020_10_07, mi_2020_10_04)
Produces plots in Plots/ and Plots_pct

10) run plot_varying_pct3(cv_2020_10_07, positions = c(241, 3037, 14408, 23403))
to get plots for groups of counties
run plot_varying_nucs2(cv_2020_10_07,positions = c(241, 3037, 14408, 23403))
to get bar plots of counts

11) Plot combos
cv_table_241 <- covary_table2(cv_2020_10_07, positions = c(241, 3037, 14408, 23403))
ggplot(cv_table_241, aes(x = Collection.Date, y=Count, fill=Nucleotides)) +
		     geom_bar(stat='identity', width=1)
		     
get counts of each combination
temp <- cv_table_241 %>%
     	   group_by(Nucleotides) %>%
     	   select(Count, Nucleotides) %>%
	   summarise_at(c("Count"), sum)

Build Trees

12) Filter sequences to remove sequences with ambiguous or indels at reference
positions.
filter_seqs.py
Default reference positions are 241, 3037, 14408, 23403
Produces sequences_filtered.fasta

13)
Align filtered sequences
time java -jar /home/bill/HAlign/HAlign-2.1.jar -localMSA sequences_filtered.fasta  sequences_filtered_aln.fasta 0
Produces sequences_filtered_aln.fasta

14) Remove low quality regions from either end of alignment.
trim_alignment.py
Produces sequences_filtered_aln_red.fasta

15) Reformat FASTA headers - add data and country
reformat_aln_headers.py
seq_positions must match positions in step 12
Produces sequences_filtered_aln2_red.fasta

16) Sample sequences to build trees
sample_aligned_sequences.py
Produces trees/sequences_filtered_aln2_samp1.fasta
Repeat sampling for new tree

17) Run BEAUTi as described at https://beast.community/first_tutorial.
Use tip dates. Otherwise defaults are good.
Produces sequences_filtered_aln2_samp1.xml

Run BEAST
Produces sequences_filtered_aln2_samp1.trees.txt,
sequences_filtered_aln2_samp1.log.txt and
sequences_filtered_aln2_samp1.ops.txt

Run TreeAnnotator
Produces sequences_filtered_aln2_samp1.trees_out.txt

Run FigTree
View tree sequences_filtered_aln2_samp1.trees_out.txt
Export tree as Newick tree

18) Plot Tree in R

Read Newick tree
tree1 <- read.newick('trees/sequences_filtered_aln2_samp1.trees.nwk')

Get tip lables
df <- get_tip_types(tree1)

Plot Tree
plot_tree(tree1, df)
