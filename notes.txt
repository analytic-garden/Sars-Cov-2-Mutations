Pipeline

1) Download SARS-CoV-2 FASTA and GenBank sequences from
https://www.ncbi.nlm.nih.gov/datasets/coronavirus/genomes/
unzip in data directories seqs.fasta dn segs.gb
data is in seqs.fasta/ncbi_dataset/data/genomic.fna and
seqs.gb/ncbi_dataset/data/genomic.gbff

2) Remove duplicate sequences and sequeces with bad dates
remove_dups_dates.py
New FASTA file sequences_no_dups.fasta

3) Align sequences
time java -jar /home/bill/HAlign/HAlign-2.1.jar -localMSA sequences_no_dups.fasta sequences_no_dups_aln.fasta 0
produces sequences_no_dups_aln.fasta

6) run consensus3.py
edit consensus cutoff and min_qual_cutoff
produces:
sars_cov_2_variation_ncbi_no_dups_98.0.csv - positions with signifcant varion by NCBI ID
MI_ncbi_no_dups.csv - mutual information among aligned positions
sars_cov_2_ncbi_ncbi_mut_no_dups_98.0.csv -  positions with significant mutations

R

7) Plot MI graph
mi_2020_10_07 <- read.csv('MI_ncbi_no_dups.csv')
plot_MI(mi_2020_10_07)

8) Read sars_cov_2_variation_ncbi_no_dups_98.0.csv into dataframe
cv_2020_09_04 <- read_csv('sars_cov_2_variation_ncbi_no_dups_98.0.csv')
# remove spaves from column names
names(cv_2020_10_07) <- make.names(names(cv_2020_10_07), unique = TRUE)
cv_2020_10_07$Collection.Date <- as.Date(cv_2020_10_07$Collection.Date)

9) Plot varying positions - displays all positions with significant MI
and saves to files
plot_varying_nucs(cv_2020_10_07)
plot_varying_pct2(cv_2020_10_07, mi_2020_10_04)
Produces plots in Plots/ and Plots_pct

10) run plot_varying_pct3(cv_2020_10_07, positions = c(241, 3037, 14408, 23403))
to get plots for groups of counties
run plot_varying_nucs2(cv_2020_10_07,positions = c(241, 3037, 14408, 23403))
to get bar plots of counts

11) Plot combos
cv_table_241 <- covary_table2(cv_2020_10_07, positions = c(241, 3037, 14408, 23403))
ggplot(cv_table_241, aes(x = Collection.Date, y=Count, fill=Nucleotides)) +
		     geom_bar(stat='identity', width=1)
		     
get counts of each combination
cv_table_241 %>% group_by(Nucleotides) %>%
   select(Count, Nucleotides) %>%
   summarise_at(c("Count"), sum)


